plugins {
    alias(libs.plugins.android.library)
//    id 'maven-publish'
}

//afterEvaluate {
//    publishing {
//        // 配置maven 仓库
//        repositories {
//            // build/outputs/maven_repo
//            maven { url uri(new File(buildDir, "outputs/maven_repo").path) }
//        }
//        // 配置发布产物
//        publications {
//            release(MavenPublication) { // 容器可配置的信息 MavenPublication
//                // 注：AGP 3.6.0 及以上才能使用，作用是将 Android Gradle 插件生成的组件，作为发布的内容
//                from components.findByName('release')
//
//                groupId "com.ssmalllucky.android"
//                artifactId "corekit"
//                version "1.0.3"
//
//            }
//        }
//    }
//}

//版本号（改动条件：完全重构 或 重要功能的改动）
def versionValue = "1"

//发布号（改动条件：功能的改动 或 错误的修复）
def releaseValue = "0"

//固定号（改动条件：此AAR的任意调整）
//def fixValue = releaseTime()
def fixValue = "3"

android {
    namespace 'com.ssmalllucky.android.core'
    compileSdk 34

    defaultConfig {
        minSdk 24
        //noinspection ExpiredTargetSdkVersion
        targetSdk 28
        versionName "$versionValue.$releaseValue.$fixValue"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    libraryVariants.configureEach { variant ->
        variant.outputs.configureEach { outputs ->
            outputFileName = "corekit_V${defaultConfig.versionName}.aar"
        }
    }
}

tasks.register('updateMarkdown') {
    doLast {
//        if (!project.hasProperty('debug')) {
        if (!project.gradle.startParameter.taskNames.any { it.contains("Debug") }) {
            println "Debug mode detected. Skipping appending Git commit to markdown."
            // 获取最近一次提交信息并追加到文件的逻辑
//        def gitLog = 'git log -1 --pretty=format:"%h - %an, %ar : %s"'.execute().text.trim()
//            def gitLog = 'git log -1 --pretty=format:"%s"'.execute().text
            def gitLog = 'git log -1 --pretty=format:"%s%n%n%b"'.execute().text.trim()
            println(gitLog)
            gitLog = gitLog.substring(gitLog.indexOf(":") + 1).trim()
            gitLog = gitLog.substring(0, gitLog.indexOf("Change-Id")).trim()
            def markdownFile = file("${project.rootDir}/app/src/main/assets/CHANGELOG.md")

            // 读取现有的文件内容
            def currentContent = markdownFile.text
            // 将新的提交记录追加到文件末尾
            def newContent = "### " + android.defaultConfig.versionName + "\n" + gitLog + "\n\n" + currentContent
            markdownFile.write(newContent)
        }
    }
}

static def releaseTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("GMT+8"))
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
    implementation libs.scottyab.rootbeer.lib
    implementation libs.gson
}